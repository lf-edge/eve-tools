
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/// Derived fom azure-iot-sdk-c library.
/// https://github.com/Azure/azure-iot-sdk-c/blob/main/provisioning_client/tests/hsm_client_tpm_ut/hsm_client_tpm_ut.c

#include "microtest.h"
#include "hsm_client_data.h"

extern HSM_CLIENT_HANDLE hsm_client_tpm_create();
extern void hsm_client_tpm_destroy(HSM_CLIENT_HANDLE handle);
extern int insert_key_in_tpm(HSM_CLIENT_HANDLE, const unsigned char*, size_t);
extern int hsm_client_tpm_get_endorsement_key(HSM_CLIENT_HANDLE, unsigned char**, size_t*);
extern int hsm_client_tpm_get_storage_key(HSM_CLIENT_HANDLE, unsigned char**, size_t*);
extern int hsm_client_tpm_sign_data(HSM_CLIENT_HANDLE, const unsigned char*, size_t, unsigned char**, size_t*);

/*
 generate using :
    tpm2_createprimary -c primary.ctx
    tpm2_create -C primary.ctx -G hmac -c hmac.key
    xxd -i hmac.key
*/
unsigned char HMAC_KEY[] = {
  0xba, 0xdc, 0xc0, 0xde, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16,
  0x01, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8e, 0x00, 0x40, 0x34, 0x65,
  0x4a, 0x98, 0x88, 0x09, 0x7b, 0xac, 0xd1, 0x9f, 0xee, 0x81, 0x56, 0x0b,
  0xa4, 0x23, 0x41, 0x5c, 0xec, 0xe9, 0xf0, 0x5c, 0xce, 0x4c, 0x69, 0x81,
  0xd0, 0x63, 0xf5, 0x2e, 0xff, 0x10, 0xae, 0x83, 0xd6, 0x1f, 0xa9, 0x21,
  0x79, 0xe8, 0x78, 0xde, 0x15, 0x4f, 0x6b, 0x00, 0x27, 0x5f, 0x0c, 0xb0,
  0x77, 0xe1, 0x3e, 0xf7, 0x8c, 0x0d, 0x2f, 0xf6, 0x4b, 0x3a, 0xb9, 0x8c,
  0x49, 0xd1, 0x6a, 0x71, 0x67, 0xef, 0xe3, 0xa7, 0x4c, 0x42, 0x26, 0x0f,
  0xbe, 0xdd, 0x59, 0x18, 0x89, 0x3e, 0x52, 0x0b, 0x95, 0xd0, 0x47, 0x3d,
  0x84, 0xf8, 0xd2, 0x5e, 0x38, 0xa2, 0x4e, 0xae, 0x19, 0x11, 0xa8, 0xd3,
  0xb8, 0xd5, 0x88, 0x5b, 0x59, 0x57, 0xc8, 0x3b, 0x41, 0xbc, 0x28, 0xe4,
  0x04, 0x11, 0x41, 0x3b, 0x74, 0x0e, 0x56, 0x2b, 0xcd, 0x6b, 0xf6, 0xb0,
  0x91, 0xc6, 0xd3, 0xa6, 0xe1, 0x41, 0xe1, 0x3c, 0xe5, 0x06, 0xb2, 0xf5,
  0xfa, 0x3e, 0x1b, 0x45, 0x62, 0x6f, 0x91, 0x5c, 0x60, 0xc5, 0x94, 0xec,
  0x4b, 0x2e, 0xa7, 0x89, 0xd2, 0x51, 0xdb, 0x02, 0xfa, 0xa7, 0xe0, 0x4c,
  0xba, 0x95, 0x8e, 0xde, 0x54, 0x81, 0xe1, 0x98, 0xb6, 0x76, 0xbf, 0xc4,
  0xfa, 0x8b, 0xc1, 0x5f, 0xf5, 0xc4, 0x9e, 0x8f, 0x25, 0x05, 0x52, 0x65,
  0x6e, 0x61, 0xbd, 0x8d, 0xcd, 0x7d, 0x49, 0x3f, 0x05, 0xee, 0x54, 0x14,
  0x21, 0x43, 0x30, 0x70, 0x8d, 0xe6, 0xb4, 0xba, 0xcc, 0x7a, 0x49, 0xdd,
  0x8b, 0x04, 0xf7, 0x9d, 0xe0, 0xee, 0x42, 0x80, 0xca, 0x6c, 0x47, 0xe4,
  0xcf, 0xe3, 0x7d, 0xac, 0xeb, 0x20, 0x4d, 0x09, 0x94, 0x7a, 0x80, 0x43,
  0x3d, 0x2c, 0xd5, 0x7b, 0x6d, 0xbc, 0xe9, 0xb1, 0xad, 0xf6, 0x72, 0x86,
  0x20, 0x81, 0xb0, 0xcc, 0xf7, 0x5a, 0x5f, 0xf7, 0xf6, 0x88, 0x26, 0x05,
  0xd2, 0x7c, 0x40, 0xab, 0x10, 0xc5, 0x5c, 0x11, 0x81, 0x2b, 0xe3, 0x85,
  0xf9, 0x8a, 0xc8, 0xe1, 0xb6, 0xee, 0xd4, 0x91, 0x3c, 0x5e, 0xf0, 0x6f,
  0x55, 0x9b, 0xfe, 0x44, 0xc7, 0xdc, 0x8e, 0xca, 0xdc, 0xdc, 0x5e, 0x54,
  0x9f, 0xc1, 0x42, 0x7c, 0x76, 0xfb, 0x54, 0x30, 0xa4, 0xca, 0xe3, 0xe9,
  0x90, 0xc1, 0x25, 0x42, 0xfe, 0x74, 0x05, 0x5c, 0x11, 0x87, 0x02, 0xef,
  0xba, 0xa6, 0xd5, 0x60, 0x58, 0x61, 0x13, 0x73, 0xba, 0x5f, 0xb0, 0x7b,
  0x3c, 0xf6, 0x04, 0xf9, 0x04, 0x62, 0x9f, 0x55, 0xa7, 0xd3, 0x2c, 0xaa,
  0xed, 0xab, 0x4d, 0x10, 0x81, 0x60, 0x8e, 0x7d, 0x7c, 0x1d, 0x74, 0x3b,
  0x79, 0x1d, 0xf5, 0x42, 0xd5, 0xbf, 0x47, 0x09, 0xce, 0x96, 0x8b, 0x37,
  0xf0, 0x38, 0x29, 0x3e, 0xae, 0xb0, 0xdd, 0xb1, 0xb3, 0x83, 0xf0, 0x76,
  0x96, 0x2d, 0x86, 0x14, 0xb1, 0xea, 0x8a, 0xd7, 0x8c, 0x79, 0x23, 0xe1,
  0x4e, 0x4a, 0x11, 0x3e, 0xce, 0x7b, 0xd0, 0xc9, 0x8e, 0xb1, 0x00, 0x00,
  0x80, 0xff, 0xff, 0xfe, 0x00, 0x22, 0x00, 0x0b, 0x57, 0xc7, 0x31, 0xd9,
  0x0d, 0xa0, 0x62, 0x29, 0x7e, 0x03, 0x7e, 0xd1, 0x26, 0xe4, 0x8f, 0x55,
  0x6f, 0x59, 0x2b, 0xf9, 0x32, 0x16, 0x5b, 0xa7, 0xe8, 0x92, 0xab, 0x8f,
  0xb3, 0x66, 0xf3, 0x5a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x08,
  0x00, 0x0b, 0x00, 0x04, 0x00, 0x72, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0b,
  0x00, 0x20, 0xa2, 0x52, 0xf2, 0x75, 0xde, 0x31, 0x2f, 0xa7, 0x5a, 0x92,
  0xeb, 0x7e, 0x3f, 0xa0, 0x94, 0xfd, 0xee, 0x22, 0x2e, 0x70, 0x11, 0xd1,
  0xba, 0xcb, 0xd4, 0xaf, 0xb3, 0x68, 0xa5, 0xbb, 0x49, 0x9e
};
#define HMAC_KEY_LEN 526;

static const unsigned char TEST_IMPORT_KEY[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10 };
#define TEST_KEY_SIZE 10

static unsigned char TEST_BUFFER[128];
#define TEST_BUFFER_SIZE 128

typedef struct HSM_CLIENT_INFO_TAG
{
    uint8_t *ek_pub;
    size_t ek_pub_size;

    uint8_t *srk_pub;
    size_t srk_pub_size;

    uint8_t *dps_key_context;
    size_t dps_key_context_size;

} HSM_CLIENT_INFO;

int hsm_client_tpm_import_key(HSM_CLIENT_HANDLE handle, const unsigned char* key, size_t key_len)
{
    if (handle == NULL || key == NULL || key_len == 0)
        return 1;
    
    return insert_key_in_tpm(handle, key, key_len);
}

TEST(hsm_client_tpm_create_succeed) {
    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();
    ASSERT_NOTNULL(sec_handle);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_import_key_handle_NULL_fail)
{
    int import_res = hsm_client_tpm_import_key(NULL, TEST_IMPORT_KEY, TEST_KEY_SIZE);
    ASSERT_NEQ(0, import_res);
}

TEST(hsm_client_tpm_import_key_key_NULL_fail)
{
    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int import_res = hsm_client_tpm_import_key(sec_handle, NULL, TEST_KEY_SIZE);
    ASSERT_NEQ(0, import_res);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_import_key_succeed)
{
    
    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int import_res =  hsm_client_tpm_import_key(sec_handle, TEST_IMPORT_KEY, TEST_KEY_SIZE);
    ASSERT_EQ(0, import_res);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_get_endorsement_key_handle_NULL_succeed)
{
    unsigned char* key;
    size_t key_len;

    int result = hsm_client_tpm_get_endorsement_key(NULL, &key, &key_len);
    ASSERT_NEQ(0, result);
}

TEST(hsm_client_tpm_get_endorsement_key_size_0_fail)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_get_endorsement_key(NULL, &key, &key_len);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_get_endorsement_key_succeed)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_get_endorsement_key(sec_handle, &key, &key_len);
    ASSERT_EQ(0, result);

    free(key);
    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_get_storage_key_handle_NULL_fail)
{
    unsigned char* key;
    size_t key_len;

    int result = hsm_client_tpm_get_storage_key(NULL, &key, &key_len);

    ASSERT_NEQ(0, result);
}

TEST(hsm_client_tpm_get_storage_key_size_0_fail)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_get_storage_key(NULL, &key, &key_len);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_get_storage_key_succeed)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_get_storage_key(sec_handle, &key, &key_len);
    ASSERT_EQ(0, result);

    free(key);
    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_sign_data_handle_fail)
{
    unsigned char* key;
    size_t key_len;

    int result = hsm_client_tpm_sign_data(NULL, TEST_BUFFER, TEST_BUFFER_SIZE, &key, &key_len);
    ASSERT_NEQ(0, result);
}

TEST(hsm_client_tpm_sign_data_data_NULL_fail)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_sign_data(sec_handle, NULL, TEST_BUFFER_SIZE, &key, &key_len);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_sign_data_size_0_fail)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_sign_data(sec_handle, TEST_BUFFER, 0, &key, &key_len);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_sign_data_key_NULL_fail)
{
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_sign_data(sec_handle, TEST_BUFFER, TEST_BUFFER_SIZE, NULL, &key_len);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_sign_data_keylen_NULL_fail)
{
    unsigned char* key;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    int result = hsm_client_tpm_sign_data(sec_handle, TEST_BUFFER, TEST_BUFFER_SIZE, &key, NULL);
    ASSERT_NEQ(0, result);

    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_sign_data_succeed)
{
    unsigned char* key;
    size_t key_len;

    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();

    HSM_CLIENT_INFO* client_info = (HSM_CLIENT_INFO*)sec_handle;
    client_info->dps_key_context = HMAC_KEY;
    client_info->dps_key_context_size = HMAC_KEY_LEN;

    int result = hsm_client_tpm_sign_data(sec_handle, TEST_BUFFER, TEST_BUFFER_SIZE, &key, &key_len);
    ASSERT_EQ(0, result);

    free(key);
    hsm_client_tpm_destroy(sec_handle);
}

TEST(hsm_client_tpm_interface_succeed)
{
    HSM_CLIENT_HANDLE sec_handle = hsm_client_tpm_create();
    const HSM_CLIENT_TPM_INTERFACE* tpm_iface = hsm_client_tpm_interface();

    ASSERT_NOTNULL(tpm_iface);
    ASSERT_NOTNULL(tpm_iface->hsm_client_tpm_create);
    ASSERT_NOTNULL(tpm_iface->hsm_client_tpm_destroy);
    ASSERT_NOTNULL(tpm_iface->hsm_client_get_ek);
    ASSERT_NOTNULL(tpm_iface->hsm_client_get_srk);
    ASSERT_NOTNULL(tpm_iface->hsm_client_activate_identity_key);
    ASSERT_NOTNULL(tpm_iface->hsm_client_sign_with_identity);

    hsm_client_tpm_destroy(sec_handle);
}

TEST_MAIN();
