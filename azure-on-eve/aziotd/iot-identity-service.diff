/**
 * Author: Gopi krishna Kodali (gkodali@zededa.com)
 *
 * This diff has code changes to make hsm module in aziot-tpm-sys to make use
 * of the vtpm feature provided by lfedge-eve-tools.
 * aziot-tpm-sys will now use lfedge-eve-tools shared library (libevetools.so)
 * to talk to EVE control domain for getting the hardware TPM EK and signing any date with TPM etc.
 */

diff --git a/tpm/aziot-tpm-sys/azure-iot-hsm-c/CMakeLists.txt b/tpm/aziot-tpm-sys/azure-iot-hsm-c/CMakeLists.txt
index 3409852..b735228 100644
--- a/tpm/aziot-tpm-sys/azure-iot-hsm-c/CMakeLists.txt
+++ b/tpm/aziot-tpm-sys/azure-iot-hsm-c/CMakeLists.txt
@@ -61,7 +61,8 @@ if (save_ut)
     set(run_unittests ${save_ut} CACHE BOOL "unittests" FORCE)
 endif(save_ut)
 
-target_link_libraries(aziottpm aziotsharedutil utpm ${OPENSSL_LIBRARIES})
+find_library(LIB_EVE_TOOLS libevetools.so /usr/lib/)
+target_link_libraries(aziottpm aziotsharedutil utpm ${OPENSSL_LIBRARIES} ${LIB_EVE_TOOLS})
 
 if (${run_unittests})
     add_subdirectory(tests)
diff --git a/tpm/aziot-tpm-sys/azure-iot-hsm-c/src/hsm_client_tpm_device.c b/tpm/aziot-tpm-sys/azure-iot-hsm-c/src/hsm_client_tpm_device.c
index e953582..13d7aa9 100644
--- a/tpm/aziot-tpm-sys/azure-iot-hsm-c/src/hsm_client_tpm_device.c
+++ b/tpm/aziot-tpm-sys/azure-iot-hsm-c/src/hsm_client_tpm_device.c
@@ -17,73 +17,36 @@
 #include "hsm_client_data.h"
 #include "hsm_err.h"
 #include "hsm_log.h"
+#include "eve_tpm_service.h"
 
-#define EPOCH_TIME_T_VALUE          0
-#define HMAC_LENGTH                 32
-#define TPM_DATA_LENGTH             1024
 
-static TPM2B_AUTH      NullAuth = { .t = {0,  {0}} };
-static TSS_SESSION     NullPwSession;
-static const UINT32 TPM_20_SRK_HANDLE = HR_PERSISTENT | 0x00000001;
-static const UINT32 TPM_20_EK_HANDLE = HR_PERSISTENT | 0x00010001;
-static const UINT32 DPS_ID_KEY_HANDLE = HR_PERSISTENT | 0x00000100;
+#define TPM_MAX_DATA_LENGTH 4096
+#define PRIVATE_KEY_BACKUP_FILE "/var/lib/aziot/tpmd/backup_private_key"
+#define PUBLIC_KEY_BACKUP_FILE "/var/lib/aziot/tpmd/backup_public_key"
+
+static const uint32_t TPM_20_EK_HANDLE =  0x81000001;
+static const uint32_t TPM_20_SRK_HANDLE = 0x81000002;
+static const uint32_t TPM_20_RH_ENDORSEMENT =  0x4000000B;
 
 typedef struct HSM_CLIENT_INFO_TAG
 {
-    TSS_DEVICE tpm_device;
-    TPM2B_PUBLIC ek_pub;
-    TPM2B_PUBLIC srk_pub;
+    uint8_t *ek_pub;
+    size_t ek_pub_size;
 
-    TPM2B_PUBLIC id_key_public;
-    TPM2B_PRIVATE id_key_dup_blob;
-    TPM2B_PRIVATE id_key_priv;
-} HSM_CLIENT_INFO;
+    uint8_t *srk_pub;
+    size_t srk_pub_size;
 
-static TPMS_RSA_PARMS  RsaStorageParams = {
-    { TPM_ALG_AES, {128}, {TPM_ALG_CFB} },              // TPMT_SYM_DEF_OBJECT  symmetric
-    { TPM_ALG_NULL,  {.anySig = {ALG_ERROR_VALUE} }},   // TPMT_RSA_SCHEME      scheme
-    2048,                                               // TPMI_RSA_KEY_BITS    keyBits
-    0                                                   // UINT32               exponent
-};
+    uint8_t *dps_key_context;
+    size_t dps_key_context_size;
 
-static TPM2B_PUBLIC* GetEkTemplate ()
-{
-    static TPM2B_PUBLIC EkTemplate = { 0,   // size will be computed during marshaling
-    {
-        TPM_ALG_RSA,                        // TPMI_ALG_PUBLIC      type
-        TPM_ALG_SHA256,                     // TPMI_ALG_HASH        nameAlg
-        { 0 },                              // TPMA_OBJECT  objectAttributes (set below)
-        { .t = {.size = 32,
-                .buffer = { 0x83, 0x71, 0x97, 0x67, 0x44, 0x84, 0xb3, 0xf8,
-                            0x1a, 0x90, 0xcc, 0x8d, 0x46, 0xa5, 0xd7, 0x24,
-                            0xfd, 0x52, 0xd7, 0x6e, 0x06, 0x52, 0x0b, 0x64,
-                            0xf2, 0xa1, 0xda, 0x1b, 0x33, 0x14, 0x69, 0xaa }}
-        },                                  // TPM2B_DIGEST         authPolicy
-        { .rsaDetail = {{0}, {0}, 0, 0} },  // TPMU_PUBLIC_PARMS    parameters (set below)
-        { .sym.b = {0} }                    // TPMU_PUBLIC_ID       unique
-    } };
-    EkTemplate.publicArea.objectAttributes = ToTpmaObject(
-        Restricted | Decrypt | FixedTPM | FixedParent | AdminWithPolicy | SensitiveDataOrigin);
-    EkTemplate.publicArea.parameters.rsaDetail = RsaStorageParams;
-    return &EkTemplate;
-}
+} HSM_CLIENT_INFO;
 
-static TPM2B_PUBLIC* GetSrkTemplate()
-{
-    static TPM2B_PUBLIC SrkTemplate = { 0,  // size will be computed during marshaling
-    {
-        TPM_ALG_RSA,                        // TPMI_ALG_PUBLIC      type
-        TPM_ALG_SHA256,                     // TPMI_ALG_HASH        nameAlg
-        { 0 },                              // TPMA_OBJECT  objectAttributes (set below)
-        { .t = {0, {0}} },                  // TPM2B_DIGEST         authPolicy
-        { .rsaDetail = {{0}, {0}, 0, 0} },  // TPMU_PUBLIC_PARMS    parameters (set below)
-        { .sym.b = {0} }                    // TPMU_PUBLIC_ID       unique
-    } };
-    SrkTemplate.publicArea.objectAttributes = ToTpmaObject(
-        Restricted | Decrypt | FixedTPM | FixedParent | NoDA | UserWithAuth | SensitiveDataOrigin);
-    SrkTemplate.publicArea.parameters.rsaDetail = RsaStorageParams;
-    return &SrkTemplate;
-}
+#define RETURN_IF_FAILS(func)     \
+	do {                      \
+	    int rc = (func);    \
+	    if (rc != 0)          \
+                return rc;        \
+        }while(0)                \
 
 #define DPS_UNMARSHAL(Type, pValue) \
 {                                                                       \
@@ -94,6 +57,11 @@ static TPM2B_PUBLIC* GetSrkTemplate()
     }                                                                   \
 }
 
+#define DPS_MARSHAL(Type, pValue, pBuffer, size) \
+{                                                                       \
+    buflen = Type##_Marshal(pValue, &pBuffer, (INT32*)&size);      \
+}
+
 #define DPS_UNMARSHAL_FLAGGED(Type, pValue) \
 {                                                                       \
     TPM_RC rc = Type##_Unmarshal(pValue, &curr_pos, (INT32*)&act_size, TRUE);   \
@@ -104,7 +72,7 @@ static TPM2B_PUBLIC* GetSrkTemplate()
 }
 
 #define DPS_UNMARSHAL_ARRAY(dstPtr, arrSize) \
-    DPS_UNMARSHAL(UINT32, &(arrSize));                                          \
+    DPS_UNMARSHAL(uint32_t, &(arrSize));                                          \
     printf("act_size %d < actSize %d\r\n", act_size, arrSize);   \
     if (act_size < arrSize)                                                     \
     {                                                                           \
@@ -113,184 +81,380 @@ static TPM2B_PUBLIC* GetSrkTemplate()
     }                                                                           \
     else                            \
     {                                   \
-        dstPtr = curr_pos - sizeof(UINT16);                                         \
-        *(UINT16*)dstPtr = (UINT16)arrSize;                                         \
+        dstPtr = curr_pos - sizeof(uint16_t);                                         \
+        *(uint16_t*)dstPtr = (uint16_t)arrSize;                                         \
         curr_pos += arrSize;                         \
     }
 
-static int create_tpm_session
-(
-    HSM_CLIENT_INFO* sec_info,
-    TSS_SESSION* tpm_session
-)
+
+/**
+ * Given a file, return its size in bytes
+ * @param filename
+ *  Name of the file, including its absolute path
+ * @return
+ *  size of the file in bytes, 0 if file is not found
+ */
+static size_t
+size_of_file (const char *filename)
 {
-    int result;
-    TPMA_SESSION sess_attrib = { .continueSession = 1 };
-    if (TSS_StartAuthSession(&sec_info->tpm_device, TPM_SE_POLICY, TPM_ALG_SHA256, sess_attrib, tpm_session) != TPM_RC_SUCCESS)
-    {
-        LOG_ERROR("Failure: Starting EK policy session");
-        result = __FAILURE__;
-    }
-    else if (TSS_PolicySecret(&sec_info->tpm_device, &NullPwSession, TPM_RH_ENDORSEMENT, tpm_session, NULL, 0) != TPM_RC_SUCCESS)
-    {
-        LOG_ERROR("Failure: PolicySecret() for EK");
-        result = __FAILURE__;
+	FILE *pFile = fopen(filename, "r");
+	unsigned int lSize = 0;
+	if (pFile) {
+		fseek (pFile , 0 , SEEK_END);
+		lSize = ftell (pFile);
+		fclose(pFile);
+	}
+	return (size_t)lSize;
+}
+
+/**
+ * Reads size bytes from a file, continuing on EINTR short reads.
+ * @param f
+ *  The file to read from.
+ * @param data
+ *  The data buffer to read into.
+ * @param size
+ *  The size of the buffer, which is also the amount of bytes to read.
+ * @return
+ *  True on success, False otherwise.
+ */
+static bool read_bytes_from_file(FILE *f, unsigned char *data, size_t size) {
+
+    size_t bread = 0;
+    size_t index = 0;
+    do {
+        bread = fread(&data[index], 1, size, f);
+        if (bread != size) {
+            if (feof(f) || (errno != EINTR)) {
+                return false;
+            }
+            /* continue on EINTR */
+        }
+        size -= bread;
+        index += bread;
+    } while (size > 0);
+
+    return true;
+}
+
+
+/**
+ * Given filename,  read the whole of the file, and return the content
+ * @param filename
+ *  Name of the file to read
+ * @param buflen
+ *  Number of bytes read from the file
+ * @param buf
+ *  Buffer holding the content. Required memory is allocated by this function
+ *  Caller should free the buffer memory after use
+ * @return
+ *  success or failure as boolean
+ */
+static bool
+read_from_file_to_buf (const char *filename, size_t *buflen, unsigned char **buf)
+{
+	FILE *fp = fopen(filename, "rb");
+	if (!fp) {
+		return false;
+	}
+	*buflen = size_of_file(filename);
+	*buf = (unsigned char *)malloc(sizeof(char) * (*buflen));
+	if (*buf == NULL) {
+		return false;
+	}
+	bool result = read_bytes_from_file(fp, *buf, *buflen);
+	fclose(fp);
+	return result;
+}
+
+/**
+ * Writes size bytes to a file, continuing on EINTR short writes.
+ * @param f
+ *  The file to write to.
+ * @param data
+ *  The data to write.
+ * @param size
+ *  The size, in bytes, of that data.
+ * @return
+ *  True on success, False otherwise.
+ */
+static bool write_bytes_to_file (FILE *f, unsigned char *data, size_t size) {
+
+    size_t wrote = 0;
+    size_t index = 0;
+    do {
+        wrote = fwrite(&data[index], 1, size, f);
+        if (wrote != size) {
+            if (errno != EINTR) {
+                return false;
+            }
+            /* continue on EINTR */
+        }
+        size -= wrote;
+        index += wrote;
+    } while (size > 0);
+
+    return true;
+}
+
+bool write_from_buf_to_file(const char *path, unsigned char *buf, size_t buflen) {
+
+    if (!buf || !path) {
+        return false;
     }
-    else
-    {
-        result = 0;
+
+    FILE *fp = fopen(path, "wb+");
+    if (!fp) {
+        LOG_ERROR("File %s could not be opened", path);
+        return false;
     }
+
+    bool result = write_bytes_to_file(fp, buf, buflen);
+
+    fclose(fp);
     return result;
 }
 
+static bool tpm2_util_is_big_endian(void) {
+
+    uint32_t test_word;
+    uint8_t *test_byte;
+
+    test_word = 0xFF000000;
+    test_byte = (uint8_t *) (&test_word);
+
+    return test_byte[0] == 0xFF;
+}
+
+#define STRING_BYTES_ENDIAN_CONVERT(size) \
+    UINT##size tpm2_util_endian_swap_##size(UINT##size data) { \
+    \
+        UINT##size converted; \
+        UINT8 *bytes = (UINT8 *)&data; \
+        UINT8 *tmp = (UINT8 *)&converted; \
+    \
+        size_t i; \
+        for(i=0; i < sizeof(UINT##size); i ++) { \
+            tmp[i] = bytes[sizeof(UINT##size) - i - 1]; \
+        } \
+        \
+        return converted; \
+    }
+
+STRING_BYTES_ENDIAN_CONVERT(16)
+STRING_BYTES_ENDIAN_CONVERT(32)
+
+#define BE_CONVERT(value, size) \
+    do { \
+        if (!tpm2_util_is_big_endian()) { \
+            value = tpm2_util_endian_swap_##size(value); \
+        } \
+    } while (0)
+
+static uint8_t* writex(uint8_t *buf, uint8_t *data, size_t size) {
+    memcpy(buf, data, size);
+    return buf + size;
+}
+
+#define BUFFER_WRITE(size) \
+    uint8_t* buffer_write_##size(uint8_t *buf, uint##size##_t data) { \
+        BE_CONVERT(data, size); \
+        return writex(buf, (uint8_t *)&data, sizeof(data)); \
+    } \
+
+/**
+ * This is the magic for the file header. The header is organized
+ * as a big endian U32 (BEU32) of MAGIC followed by a BEU32 of the
+ * version number. Tools can define their own, individual file
+ * formats as they make sense, but they should always have the header.
+ */
+static const uint32_t MAGIC = 0xBADCC0DE;
+
+BUFFER_WRITE(16)
+BUFFER_WRITE(32)
+
+
+static uint8_t* buffer_write_bytes(uint8_t *buf, uint8_t bytes[], size_t len) {
+    return writex(buf, bytes, len);
+}
+
+static uint8_t*  buffer_write_header(uint8_t *out, uint32_t version) {
+    out = buffer_write_32(out, MAGIC);
+    out = buffer_write_32(out, version);
+    return out;
+}
+
+static inline int
+prepare_cred_blob(TPM2B_ID_OBJECT *enc_key_blob,
+		TPM2B_ENCRYPTED_SECRET *tpm_enc_secret,
+		uint8_t **cred_blob,
+		size_t *cred_blob_size)
+{
+#define TPM_UTIL_HDR_LEN ((sizeof(uint32_t) *2))
+	*cred_blob = (uint8_t *) malloc(sizeof(uint8_t) * 
+		                (TPM_UTIL_HDR_LEN +  //header 
+				enc_key_blob->t.size + //enc_key_blob
+			       	tpm_enc_secret->t.size + //tpm_enc_secret
+				(2*sizeof(uint16_t)))); //size fields of both blobs
+        uint8_t *moving_ptr = *cred_blob;
+	moving_ptr = buffer_write_header(moving_ptr, 1);
+	moving_ptr = buffer_write_16(moving_ptr, enc_key_blob->t.size);
+	moving_ptr = buffer_write_bytes(moving_ptr,
+		enc_key_blob->t.credential, enc_key_blob->t.size); 
+	moving_ptr = buffer_write_16(moving_ptr, tpm_enc_secret->t.size);
+	moving_ptr = buffer_write_bytes(moving_ptr, 
+		tpm_enc_secret->t.secret, tpm_enc_secret->t.size);
+	*cred_blob_size = (size_t)(moving_ptr - *cred_blob);
+	return 0;
+
+}
+
 static int insert_key_in_tpm
 (
-    HSM_CLIENT_INFO* sec_info,
+    HSM_CLIENT_HANDLE handle,
     const unsigned char* key,
     size_t key_len
 )
 {
-    int result;
-    TSS_SESSION ek_sess;
-    memset(&ek_sess, 0, sizeof(TSS_SESSION));
-    if (create_tpm_session(sec_info, &ek_sess) != 0)
-    {
-        LOG_ERROR("Failure: Starting EK policy session");
-        result = __FAILURE__;
-    }
-    else
-    {
-        TPMT_SYM_DEF_OBJECT Aes128SymDef = { TPM_ALG_AES, {128}, {TPM_ALG_CFB} };
-        TPM2B_ID_OBJECT enc_key_blob;
-        TPM2B_ENCRYPTED_SECRET tpm_enc_secret;
-        TPM2B_PRIVATE id_key_dup_blob;
-        TPM2B_ENCRYPTED_SECRET encrypt_wrap_key;
-        TPM2B_PUBLIC id_key_Public;
-        UINT16 enc_data_size = 0;
-        TPM2B_DIGEST inner_wrap_key = { .t = {0, {0}} };
-        TPM2B_PRIVATE id_key_priv;
-        TPM_HANDLE load_id_key = TPM_ALG_NULL;
-
-        uint8_t* curr_pos = (uint8_t*)key;
-        uint32_t act_size = (int32_t)key_len;
-        memset(&id_key_Public, 0, sizeof(TPM2B_PUBLIC));
-        id_key_Public.size = 0;
-        id_key_Public.publicArea.type = TPM_ALG_NULL;
-        DPS_UNMARSHAL(TPM2B_ID_OBJECT, &enc_key_blob);
-        DPS_UNMARSHAL(TPM2B_ENCRYPTED_SECRET, &tpm_enc_secret);
-        DPS_UNMARSHAL(TPM2B_PRIVATE, &id_key_dup_blob);
-        DPS_UNMARSHAL(TPM2B_ENCRYPTED_SECRET, &encrypt_wrap_key);
-        DPS_UNMARSHAL_FLAGGED(TPM2B_PUBLIC, &id_key_Public);
-
-        // The given TPM may support larger TPM2B_MAX_BUFFER than this API headers define.
-        // So instead of unmarshaling data in a standalone data structure just reuse the
-        // original activation buffer (after updating byte order of the UINT16 counter)
-        DPS_UNMARSHAL(UINT16, &enc_data_size);
-
-        if (TPM2_ActivateCredential(&sec_info->tpm_device, &NullPwSession, &ek_sess, TPM_20_SRK_HANDLE, TPM_20_EK_HANDLE,
-            &enc_key_blob, &tpm_enc_secret, &inner_wrap_key) != TPM_RC_SUCCESS)
-        {
-            LOG_ERROR("Failure: TPM2_ActivateCredential");
-            result = __FAILURE__;
-        }
-        else if (TPM2_Import(&sec_info->tpm_device, &NullPwSession, TPM_20_SRK_HANDLE, (TPM2B_DATA*)&inner_wrap_key, &id_key_Public, &id_key_dup_blob, &encrypt_wrap_key, &Aes128SymDef, &id_key_priv) != TPM_RC_SUCCESS)
-        {
-            LOG_ERROR("Failure: importing dps Id key");
-            result = __FAILURE__;
-        }
-        else
-        {
-            TPM2B_SENSITIVE_CREATE sen_create = { 0 };
-            TPM2B_PUBLIC sym_pub;
-            TPM2B_PRIVATE sym_priv;
-
-            static TPM2B_PUBLIC symTemplate = { 0,   // size will be computed during marshaling
-            {
-                TPM_ALG_SYMCIPHER,              // TPMI_ALG_PUBLIC      type
-                TPM_ALG_SHA256,                 // TPMI_ALG_HASH        nameAlg
-                { 0 },                          // TPMA_OBJECT  objectAttributes (set below)
-                { .t = {0, {0}} },              // TPM2B_DIGEST         authPolicy
-                { .symDetail.sym = {0} },       // TPMU_PUBLIC_PARMS    parameters (set below)
-                { .sym.b = {0} }                // TPMU_PUBLIC_ID       unique
-            } };
-            symTemplate.publicArea.objectAttributes = ToTpmaObject(Decrypt | FixedTPM | FixedParent | UserWithAuth);
-            symTemplate.publicArea.parameters.symDetail.sym.algorithm = TPM_ALG_AES;
-            symTemplate.publicArea.parameters.symDetail.sym.keyBits.sym = inner_wrap_key.t.size * 8;
-            symTemplate.publicArea.parameters.symDetail.sym.mode.sym = TPM_ALG_CFB;
-
-            memcpy(sen_create.sensitive.data.t.buffer, inner_wrap_key.t.buffer, inner_wrap_key.t.size);
-            sen_create.sensitive.data.t.size = inner_wrap_key.t.size;
-
-            memset(&sym_pub, 0, sizeof(TPM2B_PUBLIC));
-            memset(&sym_priv, 0, sizeof(TPM2B_PRIVATE));
-            if (TSS_Create(&sec_info->tpm_device, &NullPwSession, TPM_20_SRK_HANDLE, &sen_create, &symTemplate, &sym_priv, &sym_pub) != TPM_RC_SUCCESS)
-            {
-                LOG_ERROR("Failed to inject symmetric key data");
-                result = __FAILURE__;
-            }
-            else if (TPM2_Load(&sec_info->tpm_device, &NullPwSession, TPM_20_SRK_HANDLE, &id_key_priv, &id_key_Public, &load_id_key, NULL) != TPM_RC_SUCCESS)
-            {
-                LOG_ERROR("Failed Load Id key.");
-                result = __FAILURE__;
-            }
-            else
-            {
-                // Remove old Id key
-                (void)TPM2_EvictControl(&sec_info->tpm_device, &NullPwSession, TPM_RH_OWNER, DPS_ID_KEY_HANDLE, DPS_ID_KEY_HANDLE);
-
-                if (TPM2_EvictControl(&sec_info->tpm_device, &NullPwSession, TPM_RH_OWNER, load_id_key, DPS_ID_KEY_HANDLE) != TPM_RC_SUCCESS)
-                {
-                    LOG_ERROR("Failed Load Id key.");
-                    result = __FAILURE__;
-                }
-                else if (TPM2_FlushContext(&sec_info->tpm_device, load_id_key) != TPM_RC_SUCCESS)
-                {
-                    LOG_ERROR("Failed Load Id key.");
-                    result = __FAILURE__;
-                }
-                else
-                {
-                    result = 0;
-                }
-            }
-        }
-
-        if (TPM2_FlushContext(&sec_info->tpm_device, ek_sess.SessIn.sessionHandle) != TPM_RC_SUCCESS)
-        {
-            // Failure to flush the session isn't a fatal error now, but might cause future calls
-            // to this function to fail.
-            LOG_ERROR("Failed to flush session");
-        }
-    }
-    return result;
+	int result = 0;
+	TPM2B_ID_OBJECT enc_key_blob;
+	TPM2B_ENCRYPTED_SECRET tpm_enc_secret;
+	TPM2B_PRIVATE id_key_dup_blob;
+	TPM2B_ENCRYPTED_SECRET encrypt_wrap_key;
+	TPM2B_PUBLIC id_key_Public;
+
+	uint8_t* curr_pos = (uint8_t*)key;
+	uint32_t act_size = (int32_t)key_len;
+	memset(&id_key_Public, 0, sizeof(TPM2B_PUBLIC));
+	id_key_Public.size = 0;
+	id_key_Public.publicArea.type = TPM_ALG_NULL;
+	DPS_UNMARSHAL(TPM2B_ID_OBJECT, &enc_key_blob);
+	DPS_UNMARSHAL(TPM2B_ENCRYPTED_SECRET, &tpm_enc_secret);
+	DPS_UNMARSHAL(TPM2B_PRIVATE, &id_key_dup_blob);
+	DPS_UNMARSHAL(TPM2B_ENCRYPTED_SECRET, &encrypt_wrap_key);
+	DPS_UNMARSHAL_FLAGGED(TPM2B_PUBLIC, &id_key_Public);
+
+	uint8_t duplicate_key_blob[TPM_MAX_DATA_LENGTH];
+	size_t duplicate_key_blob_size = 0;
+	uint8_t *pBuf = duplicate_key_blob;
+	uint16_t buflen = 0;
+	size_t max_len = TPM_MAX_DATA_LENGTH;
+	DPS_MARSHAL(TPM2B_PRIVATE, &id_key_dup_blob, pBuf, max_len);
+	duplicate_key_blob_size = buflen;
+
+	uint8_t kdf_seed[TPM_MAX_DATA_LENGTH];
+	size_t kdf_seed_size = 0;
+	pBuf = kdf_seed;
+	buflen = 0;
+	DPS_MARSHAL(TPM2B_ENCRYPTED_SECRET, &encrypt_wrap_key, pBuf, max_len);
+	kdf_seed_size = buflen;
+
+	uint8_t public_key[TPM_MAX_DATA_LENGTH];
+	size_t public_key_size = 0;
+	pBuf = public_key;
+	buflen = 0;
+	DPS_MARSHAL(TPM2B_PUBLIC, &id_key_Public, pBuf, max_len);
+	public_key_size = buflen;
+
+	uint8_t *cred_blob = NULL;
+        size_t cred_blob_size = 0;
+	uint8_t *session_context = NULL;
+	size_t session_context_size = 0;
+	uint8_t *encryption_key = NULL;
+	size_t encryption_key_size = 0;
+	uint8_t *private_key = NULL;
+	size_t private_key_size = 0;
+	
+	HSM_CLIENT_INFO *client = (HSM_CLIENT_INFO *)handle;
+	//flush existing DPS key, from memory and from TPM
+	//memory will be freed by eve_tpm_service_flushcontext
+	if (client->dps_key_context) {
+		RETURN_IF_FAILS(eve_tpm_service_flushcontext(client->dps_key_context,
+					client->dps_key_context_size));
+		client->dps_key_context = NULL;
+		client->dps_key_context_size = 0;
+	}
+
+	LOG_INFO("Activating the provided symmetric key using TPM Service...");
+	RETURN_IF_FAILS(prepare_cred_blob(&enc_key_blob, &tpm_enc_secret,
+			&cred_blob, &cred_blob_size));
+	RETURN_IF_FAILS(eve_tpm_service_startauthsession(&session_context, &session_context_size));
+        RETURN_IF_FAILS(eve_tpm_service_policysecret(session_context,
+				session_context_size, TPM_20_RH_ENDORSEMENT,
+			        &session_context, &session_context_size));
+	RETURN_IF_FAILS(eve_tpm_service_activate_credential(
+			session_context,
+			session_context_size,
+			TPM_20_SRK_HANDLE, 
+			TPM_20_EK_HANDLE, 
+			cred_blob,
+			cred_blob_size,
+			&encryption_key,
+			&encryption_key_size,
+			&session_context,
+			&session_context_size)); 
+        RETURN_IF_FAILS(eve_tpm_service_flushcontext(session_context, session_context_size));
+	free(cred_blob);
+
+        RETURN_IF_FAILS(eve_tpm_service_import(TPM_20_SRK_HANDLE,
+			 encryption_key, encryption_key_size,
+			 public_key, public_key_size,
+			 duplicate_key_blob, duplicate_key_blob_size,
+			 kdf_seed, kdf_seed_size, 
+			 &private_key, &private_key_size));
+	free(encryption_key);
+
+	RETURN_IF_FAILS(eve_tpm_service_load(TPM_20_SRK_HANDLE,
+			public_key, public_key_size,
+			private_key, private_key_size,
+			&client->dps_key_context,
+			&client->dps_key_context_size));
+	//Save public and private portions in persistent storage
+	//for offline operations
+	if (!write_from_buf_to_file(PRIVATE_KEY_BACKUP_FILE, private_key, private_key_size)) {
+		LOG_ERROR("Failed to backup DPS privisioning key (part 1)");
+	}
+	if (!write_from_buf_to_file(PUBLIC_KEY_BACKUP_FILE, public_key, public_key_size)) {
+		LOG_ERROR("Failed to backup DPS privisioning key (part 2)");
+	}
+        free(private_key);
+	return result;
 }
 
-static int initialize_tpm_device(HSM_CLIENT_INFO* tpm_info)
+static int
+initialize_tpm_device(HSM_CLIENT_INFO *handle)
 {
-    int result;
-    if (TSS_CreatePwAuthSession(&NullAuth, &NullPwSession) != TPM_RC_SUCCESS)
-    {
-        LOG_ERROR("Failure calling TSS_CreatePwAuthSession");
-        result = __FAILURE__;
-    }
-    else if (Initialize_TPM_Codec(&tpm_info->tpm_device) != TPM_RC_SUCCESS)
-    {
-        LOG_ERROR("Failure initializeing TPM Codec");
-        result = __FAILURE__;
-    }
-    else if ((TSS_CreatePersistentKey(&tpm_info->tpm_device, TPM_20_EK_HANDLE, &NullPwSession, TPM_RH_ENDORSEMENT, GetEkTemplate(), &tpm_info->ek_pub) ) == 0)
-    {
-        LOG_ERROR("Failure calling creating persistent key for Endorsement key");
-        result = __FAILURE__;
+    int result = 0;
+    LOG_INFO("Reading endorsement key using TPM Service...");
+    RETURN_IF_FAILS(eve_tpm_service_readpublic(TPM_20_EK_HANDLE, NULL, 0, TSS, &handle->ek_pub,
+		                &handle->ek_pub_size)); 
+    LOG_INFO("Reading storage key(pub) using TPM service...");
+    RETURN_IF_FAILS(eve_tpm_service_readpublic(TPM_20_SRK_HANDLE, NULL, 0, TSS, &handle->srk_pub,
+		                    &handle->srk_pub_size)); 
+
+    HSM_CLIENT_INFO *client = (HSM_CLIENT_INFO *)handle;
+    unsigned char *public_key = NULL, *private_key = NULL;
+    size_t public_key_size = 0, private_key_size = 0;
+
+    if (read_from_file_to_buf(PRIVATE_KEY_BACKUP_FILE, &private_key_size, &private_key) &&
+        read_from_file_to_buf(PUBLIC_KEY_BACKUP_FILE, &public_key_size, &public_key)) {
+
+	LOG_INFO("Found a backup DPS key. Loading it in TPM...");
+	int rc = eve_tpm_service_load(TPM_20_SRK_HANDLE,
+			public_key, public_key_size,
+			private_key, private_key_size,
+			&client->dps_key_context,
+			&client->dps_key_context_size);
+	if (rc != 0) {
+		LOG_ERROR("Failed to load backup DPS key into TPM");
+		result = rc;
+	   }
     }
-    else if (TSS_CreatePersistentKey(&tpm_info->tpm_device, TPM_20_SRK_HANDLE, &NullPwSession, TPM_RH_OWNER, GetSrkTemplate(), &tpm_info->srk_pub) == 0)
-    {
-        LOG_ERROR("Failure calling creating persistent key for Storage Root key");
-        result = __FAILURE__;
+    if (public_key) {
+	    free(public_key);
     }
-    else
-    {
-        result = 0;
+    if (private_key) {
+	    free(private_key);
     }
     return result;
 }
@@ -298,7 +462,7 @@ static int initialize_tpm_device(HSM_CLIENT_INFO* tpm_info)
 HSM_CLIENT_HANDLE hsm_client_tpm_create()
 {
     HSM_CLIENT_INFO* result;
-    result = malloc(sizeof(HSM_CLIENT_INFO) );
+    result = malloc(sizeof(HSM_CLIENT_INFO));
     if (result == NULL)
     {
         LOG_ERROR("Failure: malloc HSM_CLIENT_INFO.");
@@ -321,8 +485,6 @@ void hsm_client_tpm_destroy(HSM_CLIENT_HANDLE handle)
     if (handle != NULL)
     {
         HSM_CLIENT_INFO* hsm_client_info = (HSM_CLIENT_INFO*)handle;
-
-        Deinit_TPM_Codec(&hsm_client_info->tpm_device);
         free(hsm_client_info);
     }
 }
@@ -342,7 +504,7 @@ int hsm_client_tpm_activate_identity_key
     }
     else
     {
-        if (insert_key_in_tpm((HSM_CLIENT_INFO*)handle, key, key_len))
+        if (insert_key_in_tpm(handle, key, key_len))
         {
             LOG_ERROR("Failure inserting key into tpm");
             result = __FAILURE__;
@@ -362,7 +524,7 @@ int hsm_client_tpm_get_endorsement_key
     size_t* key_len
 )
 {
-    int result;
+    int result = 0;
     if (handle == NULL || key == NULL || key_len == NULL)
     {
         LOG_ERROR("Invalid handle value specified: handle: %p, result: %p, result_len: %p", handle, key, key_len);
@@ -370,34 +532,14 @@ int hsm_client_tpm_get_endorsement_key
     }
     else
     {
-        HSM_CLIENT_INFO* hsm_client_info = (HSM_CLIENT_INFO*)handle;
-        if (hsm_client_info->ek_pub.publicArea.unique.rsa.t.size == 0)
-        {
-            LOG_ERROR("Endorsement key is invalid");
-            result = __FAILURE__;
-        }
-        else
-        {
-            unsigned char data_bytes[TPM_DATA_LENGTH];
-            unsigned char* data_pos = data_bytes;
-            uint32_t data_length = TPM2B_PUBLIC_Marshal(&hsm_client_info->ek_pub, &data_pos, NULL);
-            if (data_length > TPM_DATA_LENGTH)
-            {
-                LOG_ERROR("EK data length larger than allocated buffer %zu", (size_t)data_length);
-                result = __FAILURE__;
-            }
-            else if ((*key = (unsigned char*)malloc(data_length)) == NULL)
-            {
-                LOG_ERROR("Failure creating buffer handle");
-                result = __FAILURE__;
-            }
-            else
-            {
-                memcpy(*key, data_bytes, data_length);
-                *key_len = (size_t)data_length;
-                result = 0;
-            }
-        }
+	LOG_INFO("Retrieving endorsement key using TPM service...");
+	HSM_CLIENT_INFO *client_info = (HSM_CLIENT_INFO *)handle;
+	*key = (unsigned char *)malloc(client_info->ek_pub_size);
+        if (*key == NULL) {
+		return -1;
+	}	
+	memcpy(*key, client_info->ek_pub, client_info->ek_pub_size);
+	*key_len = client_info->ek_pub_size;
     }
     return result;
 }
@@ -409,7 +551,7 @@ int hsm_client_tpm_get_storage_key
     size_t* key_len
 )
 {
-    int result;
+    int result = 0;
     if (handle == NULL || key == NULL || key_len == NULL)
     {
         LOG_ERROR("Invalid handle value specified: handle: %p, result: %p, result_len: %p", handle, key, key_len);
@@ -417,35 +559,14 @@ int hsm_client_tpm_get_storage_key
     }
     else
     {
-        HSM_CLIENT_INFO* hsm_client_info = (HSM_CLIENT_INFO*)handle;
-        if (hsm_client_info->srk_pub.publicArea.unique.rsa.t.size == 0)
-        {
-            LOG_ERROR("storage root key is invalid");
-            result = __FAILURE__;
-        }
-        else
-        {
-            unsigned char data_bytes[TPM_DATA_LENGTH];
-            unsigned char* data_pos = data_bytes;
-            uint32_t data_length = TPM2B_PUBLIC_Marshal(&hsm_client_info->srk_pub, &data_pos, NULL);
-
-            if (data_length > TPM_DATA_LENGTH)
-            {
-                LOG_ERROR("SRK data length larger than allocated buffer %zu", (size_t)data_length);
-                result = __FAILURE__;
-            }
-            else if ((*key = (unsigned char*)malloc(data_length)) == NULL)
-            {
-                LOG_ERROR("Failure creating buffer handle");
-                result = __FAILURE__;
-            }
-            else
-            {
-                memcpy(*key, data_bytes, data_length);
-                *key_len = (size_t)data_length;
-                result = 0;
-            }
-        }
+	LOG_INFO("Retrieving Storage key using TPM service...");
+	HSM_CLIENT_INFO *client_info = (HSM_CLIENT_INFO *)handle;
+	*key = (unsigned char *)malloc(client_info->srk_pub_size);
+        if (*key == NULL) {
+		return -1;
+	}	
+	memcpy(*key, client_info->srk_pub, client_info->srk_pub_size);
+	*key_len = client_info->srk_pub_size;
     }
     return result;
 }
@@ -459,44 +580,23 @@ int hsm_client_tpm_sign_data
     size_t* digest_size
 )
 {
-    int result;
+    int result = 0;
 
     if (handle == NULL || data_to_be_signed == NULL || data_to_be_signed_size == 0 ||
                     digest == NULL || digest_size == NULL)
     {
-        LOG_ERROR("Invalid handle value specified handle: %p, data: %p, data_size: %zu, digest: %p, digest_size: %p",
-            handle, data_to_be_signed, data_to_be_signed_size, digest, digest_size);
+        LOG_ERROR("Invalid handle value specified handle: %p, data: %p, data_size: %zu,"
+			" digest: %p, digest_size: %p",
+                         handle, data_to_be_signed, data_to_be_signed_size, digest, digest_size);
         result = __FAILURE__;
     }
-    else
-    {
-        BYTE data_signature[TPM_DATA_LENGTH];
-        BYTE* data_copy = (unsigned char*)data_to_be_signed;
-        HSM_CLIENT_INFO* hsm_client_info = (HSM_CLIENT_INFO*)handle;
 
-        uint32_t sign_len = SignData(&hsm_client_info->tpm_device,
-                        &NullPwSession, data_copy, (UINT32)data_to_be_signed_size,
-                        data_signature, sizeof(data_signature) );
-        if (sign_len == 0)
-        {
-            LOG_ERROR("Failure signing data from hash");
-            result = __FAILURE__;
-        }
-        else
-        {
-            if ((*digest = (unsigned char*)malloc(sign_len)) == NULL)
-            {
-                LOG_ERROR("Failure creating buffer handle");
-                result = __FAILURE__;
-            }
-            else
-            {
-                memcpy(*digest, data_signature, sign_len);
-                *digest_size = (size_t)sign_len;
-                result = 0;
-            }
-        }
-    }
+    HSM_CLIENT_INFO *client = (HSM_CLIENT_INFO *)handle;
+    LOG_INFO("HMAC-Signing the given message using TPM service...");
+    RETURN_IF_FAILS(eve_tpm_service_hmac(client->dps_key_context, client->dps_key_context_size,EVE_SHA256,
+		    data_to_be_signed, data_to_be_signed_size,
+		    digest, digest_size));
+
     return result;
 }
 
@@ -514,6 +614,10 @@ int hsm_client_tpm_init(int log_level)
     return 0;
 }
 
+void hsm_client_tpm_device_deinit(void)
+{
+}
+
 static const HSM_CLIENT_TPM_INTERFACE tpm_interface =
 {
     hsm_client_tpm_create,
@@ -529,3 +633,4 @@ const HSM_CLIENT_TPM_INTERFACE* hsm_client_tpm_interface(void)
 {
     return &tpm_interface;
 }
+
diff --git a/tpm/aziot-tpm-sys/build.rs b/tpm/aziot-tpm-sys/build.rs
index 26b67ac..1238d9e 100644
--- a/tpm/aziot-tpm-sys/build.rs
+++ b/tpm/aziot-tpm-sys/build.rs
@@ -130,6 +130,9 @@ fn main() {
 
         println!("cargo:rustc-link-search=native={}/build/deps/utpm", aziottpm.display());
         println!("cargo:rustc-link-lib=static=utpm");
+
+        println!("cargo:rustc-link-search=native=/usr/lib/");
+        println!("cargo:rustc-link-lib=dylib=evetools");
     };
     link();
 }
